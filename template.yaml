AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app
  
Globals:
  Function:
    Timeout: 3

Resources: 

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/24

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.0.1.0/24


  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: This is a group for lambda function
      GroupName: LambdaSecurityGroup
      VpcId: !Ref VPC

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: This is a security group for RDS
      GroupName: RDSSecurityGroup
      VpcId: !Ref VPC

  RDSSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt RDSSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 3306
      CidrIp: 0.0.0.0/0

  SQLQuery:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: code/
      Handler: sql.handler
      Runtime: nodejs8.10
      Policies:
      - AWSLambdaExecute # Managed Policy
      - Version: '2012-10-17' # Policy Document
        Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
      VpcConfig:
        SubnetIds:
          - Ref: SubnetA
          - Ref: SubnetB
        SecurityGroupIds:
          - Ref: LambdaSecurityGroup
      Environment:
        Variables:
          HOST: !GetAtt MyDB.Endpoint.Address
          USER: test
          PASSWORD: Password1!
          DATABASEABLE_NAME: test
      Events:
        HelloWorldAPI:
          Type: Api 
          Properties:
            Path: /showtables
            Method: get
  MyDBSubnetGroup: 
    Properties: 
      DBSubnetGroupDescription: description
      SubnetIds: 
        - !Ref SubnetA
        - !Ref SubnetB
    Type: "AWS::RDS::DBSubnetGroup"

  MyDB: 
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Snapshot
    Properties: 
      AllocatedStorage: "100"
      DBInstanceClass: db.t2.micro
      DBName: test
      Engine: MySQL
      EngineVersion: "8.0.15"
      MasterUserPassword: Password1!
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      MasterUsername: test
      VPCSecurityGroups: 
        - !GetAtt RDSSecurityGroup.GroupId

Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
